from pymongo import MongoClient
from bson.objectid import ObjectId
from meteor import meteor_score
from rougeL import rouge_l
from emseBleu import nltk_bleu
from time import sleep
import csv
from ollama import Client
llama_host = 'http://10.18.208.5:11434'


client = MongoClient('mongodb://localhost:27017/')
db = client.code_understanding    
       
sampleDB = db.checkedDepSample


def generateSummary(method):
    instruction =("""Write down only the summary part of the Javadoc comment (in one sentence) that would have been written by a developer for the following function,\n\n""")
    prompt = instruction + "\"" + method + "\"\n\n"
    # prompt+= "Where the implementations of the helper functions are as follows:\n"
    
    # for helper in helpers:
    #     prompt+='-------------------------------------------------------------------------------\n'
    #     prompt+= helper+"\n"
    #     prompt+='-------------------------------------------------------------------------------\n'
    
    llama_client = Client(host=llama_host)
    response = llama_client.chat(
    model='llama3.3',
    messages=[{ 'role': 'system', 'content': 'You are an expert Java developer.'}, 
              {'role':'user', 'content': prompt}]
              )
    
    summary = response['message']['content']

    return summary


results = []

counter=0

for item in sampleDB.find():
    #print(item)
    #helpers = item.get('helpers').get('helpers')
    method = item.get('Syntax')
    # helperMethods = set()
    # for helper in helpers:
    #     helperBody = helper.get('MethodBody') 
    #     if(len(helperBody)==0):
    #         continue
    #     helperMethods.add(helperBody)
    try:
        HelpComSummary = generateSummary(method)
        #print(HelpComSummary)
        data = {
            '_id': item.get('_id'),
            'Summary': HelpComSummary
        }
        results.append(data)
        print(HelpComSummary)
        print('-----------------------')

    except Exception as e:
        print("Error generating summary: ",e)
        sleep(2)

    sleep(1)

with open('self_Llama.csv', mode='w', newline='') as file:
    # Get the headers from the dictionary keys
    fieldnames = results[0].keys()
    writer = csv.DictWriter(file, fieldnames=fieldnames)

    writer.writeheader()  # Write headers
    writer.writerows(results)  # Write each dictionary as a r 





# Here is a piece of code with corresponding comments. Please rate each comment on a scale from 1 to 5, where a higher score indicates better quality. A good comment should: 1) accurately summarize the function of the code; 2) be expressed naturally and concisely, without burdening the developer with reading; 3) help the developer understand the code quickly. Your answer should be in the format 'Comment 0/1/2/3/4: {your rating}'.

# Code:
# <@SuppressWarnings("unchecked")
#     public void testInternalHttpRequest() throws Exception {
#         ArgumentCaptor<HttpAsyncRequestProducer> requestArgumentCaptor = ArgumentCaptor.forClass(HttpAsyncRequestProducer.class);
#         int times = 0;
#         for (String httpMethod : getHttpMethods()) {
#             HttpUriRequest expectedRequest = performRandomRequest(httpMethod);
#             verify(httpClient, times(++times)).<HttpResponse>execute(
#                 requestArgumentCaptor.capture(),
#                 any(HttpAsyncResponseConsumer.class),
#                 any(HttpClientContext.class),
#                 nullable(FutureCallback.class)
#             );
#             HttpUriRequest actualRequest = (HttpUriRequest) requestArgumentCaptor.getValue().generateRequest();
#             assertEquals(expectedRequest.getURI(), actualRequest.getURI());
#             assertEquals(expectedRequest.getClass(), actualRequest.getClass());
#             assertArrayEquals(expectedRequest.getAllHeaders(), actualRequest.getAllHeaders());
#             if (expectedRequest instanceof HttpEntityEnclosingRequest) {
#                 HttpEntity expectedEntity = ((HttpEntityEnclosingRequest) expectedRequest).getEntity();
#                 if (expectedEntity != null) {
#                     HttpEntity actualEntity = ((HttpEntityEnclosingRequest) actualRequest).getEntity();
#                     assertEquals(EntityUtils.toString(expectedEntity), EntityUtils.toString(actualEntity));
#                 }
#             }
#         }
#     }>

# Comment 0: <Tests internal HTTP requests by executing a series of random requests using different HTTP methods and verifying that the expected request matches the actual request generated by the `HttpAsyncRequestProducer`. The test checks for matching URI, class type, headers, and entity (if applicable).>
# Comment 1: <Tests that the internal HTTP request is correctly generated and executed.>
# Comment 2: <This code is a Java unit test for the `RestHighLevelClient` class. It tests the `search()` method and asserts that the response contains the expected number of results.>
# Comment 3: <Tests the internal HTTP request handling by verifying that the generated requests match the expected requests for various HTTP methods, including checking URIs, request types, headers, and entities.>

